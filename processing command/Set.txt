终端机的环境设置：stty、set
    stty:
        语法：stty [-a] 
        选项与参数： 
            -a ：将目前所有的 stty 参数列出来；
    
        intr : 送出一个 interrupt(中断)的讯号给目前正在 run 的程序(就是终止)； 
        quit : 送出一个 quit 的讯号给目前正在 run 的程序； 
        erase : 向后删除字符;
        kill : 删除在目前命令行上的所有文字; 
        eof : End of file 的意思，代表“结束输入”;
        start : 在某个程序停止后，重新启动他的 output 
        stop : 停止目前屏幕的输出； 
        susp : 送出一个 terminal stop 的讯号给正在 run 的程序;

        $ stty erase ^h     # 这个设置看看就好，不必真的实做！不然还要改回来;


    set:
        语法:$ set [-uvCHhmBx] 
        选项与参数： -u ：默认不启用,若启用后，当使用未设置变量时，会显示错误讯息;
                    -v ：默认不启用,若启用后，在讯息被输出前，会先显示讯息的原始内容; 
                    -x ：默认不启用,若启用后，在指令被执行前，会显示指令内容(前面有++符号); 
                    -h ：默认启用,与历史命令有关; 
                    -H ：默认启用,与历史命令有关; 
                    -m ：默认启用,与工作管理有关; 
                    -B ：默认启用,与刮号 [] 的作用有关; 
                    -C ：默认不启用,若使用 > 等，则若文件存在时，该文件不会被覆盖; 
                    
        例一：显示目前所有的 set 设置值:
            $ echo $- 
                himBH   # 那个 $- 变量内容就是 set 的所有设置啦！ bash 默认是 himBH 喔！ 
                
        例二：设置 "若使用未定义变量时，则显示错误讯息":
            $ set -u 
            $ echo $vbirding 
                -bash: vbirding: unbound variable   
                    # 默认情况下，未设置/未宣告的变量都会是“空的”，不过，若设置 -u 参数， 
                    # 那么当使用未设置的变量时，就会有问题，很多的 shell 都默认启用 -u 参数列出来,
                    # 若要取消这个参数，输入 set +u 即可 ；
                    
        例三：执行前，显示该指令内容:
        $ set -x 
            ++ printf '\033]0;%s@%s:%s\007' dmtsai study '~' # 这个是在列出提示字符的控制码，
        $ echo ${HOME} 
            + echo /home/dmtsai 
            /home/dmtsai 
            ++ printf '\033]0;%s@%s:%s\007' dmtsai study '~'    
                # 要输出的指令都会先被打印到屏幕上，前面会多出 + 的符号；

    其他的按键设置功能(/etc/inputrc 这个文件里面设置)
        组合按键:   Ctrl + C            
        执行结果:   终止目前的命令;

        组合按键:   Ctrl + D
        执行结果:   输入结束(EOF),例如邮件结束的时候；

        组合按键:   Ctrl + M
        执行结果:   就是 Enter ;

        组合按键:   Ctrl + S
        执行结果:   暂停屏幕的输出;

        组合按键:   Ctrl + Q
        执行结果:   恢复屏幕的输出;

        组合按键:   Ctrl + U
        执行结果:   在提示字符下，将整列命令删除;

        组合按键:   Ctrl + Z
        执行结果:   “暂停”目前的命令;


万用字符与特殊符号:
    *:  代表“ 0 个到无穷多个”任意字符 
    ?:  代表“一定有一个”任意字符 
    
    [ ]: 同样代表“一定有一个在括号内”的字符（非任意字符）;
        例如 [abcd] 代表“一定有一个字符， 可能是 a, b, c, d 这四个任 何一个” 
        
    [ - ] 若有减号在中括号内时，代表“在编码顺序内的所有字符”;
        例如 [0-9] 代表 0 到 9 之间的所有数字，因为数字的语系编码是连续的; 
        
    [^ ] 若中括号内的第一个字符为指数符号 （^） ，那表示“反向选择”;
        例如 [^abc] 代表 一定有一个字符,只要是非 a, b, c 的其他字符;

    用万用字符配合ls使用：
        $ LANG=C     #由于与编码有关，先设置语系一下 
            例一：找出 /etc/ 下面以 cron 为开头的文件名:
                $ ll -d /etc/cron*      #加上 -d 是为了仅显示目录而已 
                
            例二：找出 /etc/ 下面文件名“刚好是五个字母”的文件名:
                $ ll -d/etc/?????       #由于 ? 一定有一个，所以五个 ? 就对了 
                
            例三：找出 /etc/ 下面文件名含有数字的文件名:
                $ ll -d /etc/*[0-9]*     #记得中括号左右两边均需 * 
                
            例四：找出 /etc/ 下面，文件名开头非为小写字母的文件名:
                $ ll -d /etc/[^a-z]*    #注意中括号左边没有 * 
                
            例五：将范例四找到的文件复制到 /tmp/upper 中:
                $ mkdir /tmp/upper; cp -a /etc/[^a-z]* /tmp/upper

bash环境中的特殊符号：
    #:  注解符号,这个最常被使用在 script 当中，视为说明,在后的数据均不执行;
    \:  跳脱符号,将“特殊字符或万用字符”还原成一般字符; 
    |:  管线(pipe):分隔两个管线命令的界定;
    ;:  连续指令下达分隔符号,连续性命令的界定,与管线命令并不相同; 
    ~:  使用者的主文件夹;
    $:  取用变量前置字符,是变量之前需要加的变量取代值; 
    &:  工作控制(job control),将指令变成背景下工作;
    !:  逻辑运算意义上的“非” not 的意思; 
    /:  目录符号,路径分隔的符号; 
    >,>>:   数据流重导向,输出导向，分别是“取代”与“累加”; 
    <,<<:   数据流重导向,输入导向;
    '' :    单引号，不具有变量置换的功能,$ 变为纯文本; 
    " " :   具有变量置换的功能,$可保留相关功能; 
    ` `:    两个“ ` ”中间为可以先执行的指令，可使用 $（ ）;
    （ ）:  在中间为子 shell 的起始与结束; 
    { }:    在中间为命令区块的组合;

    (理论上，“文件名”尽量不要使用到上述的字符)

    