数据流重导向：
   含义： 执行一个指令的时候，这个指令可能会由文件读入数据，经过处理之后，再将数据输出到屏幕上；
   standard output:标准输出，指的是“指令执行所回传的正确的讯息;
   standard error output:标准错误输出，可理解为“ 指令执行失败后，所回传的错误讯息;
   特殊字符:
        标准输入(stdin)：代码为 0,使用 < 或 << ;
        标准输出(stdout)：代码为 1,使用 > 或 >> ;
        标准错误输出(stderr)：代码为 2,使用 2> 或 2>> ;
        
        例一：观察系统根目录（/）下各目录的文件名、权限与属性:
            $ ll /      #屏幕会显示出文件名信息;
            $ ll / > ~/rootfile     #屏幕没有任何信息;
            $ ll ~/rootfile         #新文件被创建; 
                -rw-rw-r--. /home/dmtsai/rootfile

    创建方式:
       文件（~/rootfile）,若不存在，系统会自动的将他创建起来,当这个文件存在的时候，那么系统就会先将
       这个文件内容清空，然后再将数据写入,就是以 > 输出到一个已存在的文件中，文件就会被覆盖掉;

    
    正确数据:
       1> ：以覆盖的方法将“正确的数据”输出到指定的文件或设备上； 
       1>>：以累加的方法将“正确的数据”输出到指定的文件或设备上； 
       2> ：以覆盖的方法将“错误的数据”输出到指定的文件或设备上； 
       2>>：以累加的方法将“错误的数据”输出到指定的文件或设备上；

        例二：利用一般身份帐号搜寻 /home 下面是否有名为 .bashrc 的文件存在:
            $ find /home -name .bashrc  #身份是 dmtsai ;
        (list 里面存了刚刚那个“正确”的输出数据，屏幕上还是会有错误的讯息出现)

        例三：承例二，将 stdout 与 stderr 分存到不同的文件去:
            $ find /home -name .bashrc > list_right 2> list_error
            #屏幕上不会出现任何讯息,正确的输出数据则会存到 list_right 这个文件中;

    
    /dev/null 垃圾桶黑洞设备与特殊写法:
       例四：承例三，将错误的数据丢弃，屏幕上显示正确的数据 
            $ find /home -name .bashrc 2> /dev/null 
                /home/dmtsai/.bashrc    #只有 stdout 会显示到屏幕上，stderr 被丢弃了;


        例五：将指令的数据全部写入名为 list 的文件中:
            $ find /home -name .bashrc > list 2> list   #错误
            $ find /home -name .bashrc > list 2>&1      #正确
            $ find /home -name .bashrc &> list          #正确
            错误的原因是:由于两股数据同时写入一个文件，又没有使用特殊的语法，
            此时两股数据可能会交叉写入该文件内，造成次序的错乱; 

    
    standard input ： < 与 <<  :
        <   :将原本需要由键盘输入的数据，改由文件内容来取代;
        
            例七：用 stdin 取代键盘的输入以创建新文件的简单流程;
                $ cat > catfile < ~/.bashrc 
                $ ll catfile ~/.bashrc 
                    -rw-r--r--.
                    -rw-rw-r--. #这两个文件的大小一模一样,是使用 cp ;

        <<  :结束的输入字符;

            例七:要用 cat 直接将输入的讯息输出到 catfile 中:
                $ cat > catfile << "eof"  
                    > eof    #输入这关键字，立刻就结束而不需要输入[ctrl]+d;
                $ cat catfile 
                    This is a test.     #只有这两行，不会存在关键字那一行; 

            (利用 << 右侧的控制字符，可以终止一次输入，不必输入 [crtl]+d 来结束) 

    使用输出重导向的原因:
       屏幕输出的信息很重要，而且我们需要将他存下来的时候,背景执行中的程序，不希望他
       干扰屏幕正常的输出结果时,一些系统的例行命令(如写在 /etc/crontab 中的文件)的执行结果，
       希望他可以存下来时,一些执行命令的可能已知错误讯息时,想以“ 2> /dev/null ”将他丢掉时, 
       错误讯息与正确讯息需要分别输出时;            

        

双向重导向:
    tee:将数据流分送到文件去与屏幕(screen);
    语法:$ tee [-a] file 
    选项与参数: 
        -a: 以累加(append)的方式，将数据加入 file 当中;
        
        例一：
            $ last | tee last.list | cut -d " " -f1 
            # 这个范例可以让我们将 last 的输出存一份到 last.list 文件中;
            
        例二:
            $ ls -l /home | tee ~/homefile | more 
            # 将 ls 的数据存一份到 ~/homefile,同时屏幕也有输出讯息；
            
        例三:  
            $ ls -l / | tee -a ~/homefile | more 
            # tee 后接的文件会被覆盖，若加上 -a 这个选项则能将讯息累加；

    tee 可以让 standard output 转存一份到文件内并将同样的数据继续送到屏幕去处理;
