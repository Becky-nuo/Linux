linux账号管理与ACL权限设置:
    linux的账号与群组:
        使用者识别码:UID、GID；
        
        使用者账号:
            输入帐号密码后，系统帮你处理了什么:
                先找寻/etc/passwd里面是否有你输入的帐号？如果没有则跳出，如果有的话则将该帐号对应的 UID 与 GID （在 /etc/group 中）
                读出来，另外，该帐号的主文件夹与 shell 设置也一并读出；再来则是核对密码表啦！这时 Linux 会进入 /etc/shadow 里面找出
                对应的帐号与 UID，然后核对一下你刚刚输入的密码与里头的密码是否相符；如果一切都 OK 的话，就进入 Shell 控管的阶段;
            
            /etc/passwd 文件结构:
                每一行都代表一个帐号，有几行就代表有几个帐号在你的系统中,需要特别留意的是， 里头很多帐号本来就是系统正常运行所必须要的，
                我们可以简称他为系统帐号，如 bin, daemon, adm, nobody 等，这些帐号请不要随意删掉；
        
        关于群组：有效与初始群组、groups,newgrp:
            /etc/group 文件结构:
                群组名称:需要与第三字段的 GID 对应;
                群组密码:通常不需要设置，这个设置通常是给“群组管理员”使用的;
                GID:群组的ID，/etc/passwd 第四个字段使用的 GID 对应的群组名;
                此群组支持的账号名称:帐号可以加入多个群组，那某个帐号想要加入此群组时，将该帐号填入这个字段;
            
            
            有效群组(effective group)与初始群组(initial group)
                初始群组:/etc/passwd 里面的GID;
            
            groups: 有效与支持群组的观察:
                第一个输出的群组即为有效群组（effective group）了;
            
            newgrp: 有效群组的切换：
                切换的群组必须是你已经有支持的群组;\
                可以变更目前使用者的有效群组，而且是另外以一个shell来提供这个功能的;
            
            /etc/gshadow:
                意义:
                    群组名称 ;
                    密码栏，同样的，开头为 ! 表示无合法密码，所以无群组管理员 ;
                    群组管理员的帐号 （相关信息在 gpasswd 中介绍） ;
                    有加入该群组支持的所属帐号 （与 /etc/group 内容相同）;
                功能:
                    创建群组管理员;
                    该群组管理员能够将那个帐号加入自己管理的群组中;

    账号管理:
        新增与移除使用者：
            useradd:
                语法：# useradd [-u UID] [-g 初始群组] [-G 次要群组] [-mM]\ 
                    > [-c 说明栏] [-d 主文件夹绝对路径] [-s shell] 使用者帐号名 
                选项与参数： 
                    -u ：后面接的是 UID ，是一组数字。直接指定一个特定的 UID 给这个帐号； 
                    -g ：后面接的那个群组名称是 initial group ，该群组的 GID 会被放置到 /etc/passwd 的第四个字段内； 
                    -G ：后面接的群组名称是这个帐号还可以加入的群组，这个选项与参数会修改 /etc/group 内的相关数据； 
                    -M ：强制，不要创建使用者主文件夹；（系统帐号默认值） 
                    -m ：强制，要创建使用者主文件夹；（一般帐号默认值） 
                    -c ：是 /etc/passwd 的第五栏的说明内容，可以随便我们设置的； 
                    -d ：指定某个目录成为主文件夹，而不要使用默认值。务必使用绝对路径； 
                    -r ：创建一个系统的帐号，这个帐号的 UID 会有限制 （参考 /etc/login.defs） ；
                    -s ：后面接一个 shell ，若没有指定则默认是 /bin/bash 的；
                    -e ：后面接一个日期，格式为“YYYY-MM-DD”此项目可写入 shadow 第八字段，帐号失效日的设置项目； 
                    
                    -f ：后面接 shadow 的第七字段项目，指定密码是否会失效。0为立刻失效，-1 为永远不失效；
                    （密码只会过期而强制于登陆时重新设置而已）；
                
                在 /etc/passwd 里面创建一行与帐号相关的数据，包括创建 UID/GID/主文件夹等； 
                在 /etc/shadow 里面将此帐号的密码相关参数填入，但是尚未有密码； 
                在 /etc/group 里面加入一个与帐号名称一模一样的群组名称； 
                在 /home 下面创建一个与帐号同名的目录作为使用者主文件夹，且权限为 700；

                例:# useradd -D 
                    GROUP=100   #默认的群组 ;
                    HOME=/home  #默认的主文件夹所在目录 ;
                    INACTIVE=-1     #密码失效日，在 shadow 内的第 7 栏 ;
                    EXPIRE=         #帐号失效日，在 shadow 内的第 8 栏 ;
                    SHELL=/bin/bash     #默认的 shell ;
                    SKEL=/etc/skel    #使用者主文件夹的内容数据参考目录; 
                    CREATE_MAIL_SPOOL=yes   #是否主动帮使用者创建邮件信箱（mailbox）;

            passwd:
                语法:$ passwd [--stdin] [帐号名称]  #所有人均可使用来改自己的密码 
                    $ passwd [-l] [-u] [--stdin] [-S] \ > [-n 日数] [-x 日数] [-w 日数] [-i 日期] 帐号  #root 功能 
                
                选项与参数： 
                    ——stdin ：可以通过来自前一个管线的数据，作为密码输入，对 shell script 有帮助; 
                    -l ：是 Lock 的意思，会将 /etc/shadow 第二栏最前面加上 ! 使密码失效; 
                    -u ：与 -l 相对，是 Unlock 的意思; 
                    -S ：列出密码相关参数，如 shadow 文件内的大部分信息; 
                    -n ：后面接天数，shadow 的第 4 字段，多久不可修改密码天数 ;
                    -x ：后面接天数，shadow 的第 5 字段，多久内必须要更动密码 ;
                    -w ：后面接天数，shadow 的第 6 字段，密码过期前的警告天数 ;
                    -i ：后面接“日期”，shadow 的第 7 字段，密码失效日期;

                设置密码要求:
                    密码不能与帐号相同； 
                    密码尽量不要选用字典里面会出现的字串； 
                    密码需要超过 8 个字符； 
                    密码不要使用个人信息，如身份证、手机号码、其他电话号码等； 
                    密码不要使用简单的关系式，如 1+1=2， Iamvbird 等； 
                    密码尽量使用大小写字符、数字、特殊字符（$,_,-等）的组合；
            
            chage:
                语法:$ chage [-ldEImMW] 帐号名 
                选项与参数： 
                    -l ：列出该帐号的详细密码参数； 
                    -d ：后面接日期，修改 shadow 第三字段（最近一次更改密码的日期），格式 YYYY-MM-DD ;
                    -E ：后面接日期，修改 shadow 第八字段（帐号失效日），格式 YYYY-MM-DD ;
                    -I ：后面接天数，修改 shadow 第七字段（密码失效日期） ;
                    -m ：后面接天数，修改 shadow 第四字段（密码最短保留天数） ;
                    -M ：后面接天数，修改 shadow 第五字段（密码多久需要进行变更） ;
                    -W ：后面接天数，修改 shadow 第六字段（密码过期前警告日期）;
                
                功能:使用者在第一次登陆时，强制她们一定要更改密码后才能够使用系统资源;

            usermod:
                语法:$ usermod [-cdegGlsuLU] username 
                选项与参数： 
                    -c ：后面接帐号的说明，如 /etc/passwd 第五栏的说明栏，可以加入一些帐号的说明； 
                    -d ：后面接帐号的主文件夹，如修改 /etc/passwd 的第六栏； 
                    -e ：后面接日期，格式是 YYYY-MM-DD ，在 /etc/shadow 内的第八个字段数据；
                    -f ：后面接天数，是 shadow 的第七字段； 
                    -g ：后面接初始群组，修改 /etc/passwd 的第四个字段，是 GID 的字段； 
                    -G ：后面接次要群组，修改这个使用者能够支持的群组，修改的是 /etc/group；
                    -a ：与 -G 合用，可“增加次要群组的支持”而非“设置”；
                    -l ：后面接帐号名称，是修改帐号名称，/etc/passwd 的第一栏；
                    -s ：后面接 Shell 的实际文件，如 /bin/bash 或 /bin/csh 等； 
                    -u ：后面接 UID 数字，如 /etc/passwd 第三栏的数据； 
                    -L ：暂时将使用者的密码冻结，让他无法登陆。其实仅改 /etc/shadow 的密码栏；
                    -U ：将 /etc/shadow 密码栏解冻；
            
            userdel:
                语法:$ userdel [-r] username 
                选项与参数： 
                    -r ：连同使用者的主文件夹也一起删除
                
                使用者数据:
                    使用者帐号/密码相关参数：/etc/passwd, /etc/shadow ;
                    使用者群组相关参数：/etc/group, /etc/gshadow ;
                    使用者个人文件数据： /home/username, /var/spool/mail/username..;

                使用 userdel 的时机通常是“你真的确定不要让该用户在主机上面使用任何数据了;
    
    使用者功能:
            id :
            finger:
                语法:$ finger [-s] username 
                选项与参数： 
                    -s ：仅列出使用者的帐号、全名、终端机代号与登陆时间等等； 
                    -m ：列出与后面接的帐号相同者，而不是利用部分比对（包括全名部分）;
                
                /etc/passwd 文件列出的信息说明:
                    Login：为使用者帐号，如 /etc/passwd 内的第一字段； 
                    Name：为全名，如 /etc/passwd 内的第五字段（或称为注解）； 
                    Directory：就是主文件夹； 
                    Shell：使用的 Shell 文件所在； 
                    Never logged in.：figner 使用者登陆主机的情况； 
                    No mail.：调查 /var/spool/mail 当中的信箱数据； 
                    No Plan.：调查 ~vbird1/.plan 文件，并将该文件取出来说明；
            
            chfn:
                语法:$ chfn [-foph] [帐号名] 
                选项与参数： 
                    -f ：后面接完整的大名； 
                    -o ：您办公室的房间号码； 
                    -p ：办公室的电话号码； 
                    -h ：家里的电话号码;

            chsh:
                语法:$ chsh [-ls] 
                选项与参数： 
                    -l ：列出目前系统上面可用的 shell ，其实就是 /etc/shells 的内容; 
                    -s ：设置修改自己的 Shell ;


        新增与移除群组:
            groupadd:
                语法:$ groupadd [-g gid] [-r] 群组名称 
                选项与参数： 
                    -g ：后面接某个特定的 GID ，用来直接给予某个 GID ;
                    -r ：创建系统群组啦！与 /etc/login.defs 内的 GID_MIN 有关;
                (新建的与使用者私有群组无关的其他群组时，使用小于 1000 以下的 GID )

            groupmod:
                语法:$ groupmod [-g gid] [-n group_name] 群组名 
                选项与参数： 
                    -g ：修改既有的 GID 数字； 
                    -n ：修改既有的群组名称;

            groupdel:
                有某个帐号(/etc/passwd)的 initial group 使用该群组;
                必须要确认 /etc/passwd 内的帐号没有任何人使用该群组作为 initial group;
                修改 vbird1 的 GID ,或者删除 vbird1 这个使用者;
            
            gpasswd:群组管理员功能
                语法：$ gpasswd groupname 
                      $ gpasswd [-A user1,...] [-M user3,...] groupname 
                      $ gpasswd [-rR] groupname 
                
                选项与参数：若没有任何参数时，表示给予 groupname 一个密码（/etc/gshadow）; 
                    -A ：将 groupname 的主控权交由后面的使用者管理(该群组的管理员);
                    -M ：将某些帐号加入这个群组中; 
                    -r ：将 groupname 的密码移除 ;
                    -R ：让 groupname 的密码栏失效;
        
    主机的细部权限规划：ACL的使用
        ACL:是Access Control List 的缩写，主要是提供传统的 owner,group,others 的 read,write,execute 权限之外的细部权限设置；
            ACL 可以针对单一使用者，单一文件或目录来进行 r,w,x 的权限规范，对于需要特殊权限的使用状况非常有帮助；
            ACL的控制权限:
                使用者(user)：可以针对使用者来设置权限; 
                群组(group)：针对群组为对象来设置其权限; 
                默认属性(mask)：可以针对在该目录下在创建新文件/目录时，规范新数据的默认权限;

        ACL的设置技巧:
            getfacl：取得某个文件/目录的 ACL 设置项目; 
            setfacl：设置某个目录/文件的 ACL 规范;

            setfacl:u 账号、权限设置；
                语法:$setfacl [-bkRd] [{-m|-x} acl参数] 目标文件名 
                选项与参数： 
                    -m ：设置后续的 acl 参数给文件使用，不可与 -x 合用; 
                    -x ：删除后续的 acl 参数，不可与 -m 合用; 
                    -b ：移除“所有的” ACL 设置参数; 
                    -k ：移除“默认的” ACL 参数，关于所谓的“默认”参数于后续范例中介绍; 
                    -R ：递回设置 acl ，亦即包括次目录都会被设置起来; 
                    -d ：设置“默认 acl 参数”,只对目录有效，在该目录新建的数据会引用此默认值;

            getfacl:指令用法；
                语法:$ getfacl filename 
                选项与参数： getfacl 的选项几乎与 setfacl 相同;
            
            ACL 的功能需要文件系统有支持，CentOS 7 默认的 XFS 确实有支持 ACL 功能; 
            ACL 可进行单一个人或群组的权限管理，但 ACL 的启动需要有文件系统的支持； 
            ACL 的设置可使用 setfacl ，查阅则使用 getfacl ；

    使用者身份切换:
        su:
            语法:$ su [-lm] [-c 指令] [username] 
            选项与参数： 
                -  ：单纯使用 - 如“ su - ”代表使用 login-shell 的变量文件读取方式来登陆系统； 若使用者名称没有加上去，则代表切换为 root 的身份。 
                -l ：与 - 类似，但后面需要加欲切换的使用者帐号！也是 login-shell 的方式; 
                -m ：-m 与 -p 是一样的，表示“使用目前的环境设置，而不读取新使用者的配置文件” ;
                -c ：仅进行一次指令，所以 -c 后面可以加上指令喔;
            (读取的变量设置方式为 non-login shell 的方式，这种方式很多原本的变量不会被改变)
            su的缺点是:主机在多人共管的环境时，都要使用 su 来切换成为 root 的身份， root 的密码就容易泄露；

        sudo:
            sudo 的执行则仅需要自己的密码，甚至可以设置不需要密码即可执行；
            不是所有人都能够执行 sudo ， 仅有规范到 /etc/sudoers 内的用户才能够执行 sudo 这个指令;
            语法:$ sudo [-b] [-u 新使用者帐号] 
            选项与参数： 
                -b ：将后续的指令放到背景中让系统自行执行，不与目前的 shell 产生影响 ;
                -u ：后面可以接欲切换的使用者，若无此项则代表切换身份为 root ;
            
            sudo的执行流程:
                当使用者执行 sudo 时，系统于 /etc/sudoers 文件中搜寻该使用者是否有执行 sudo 的权限； 
                若使用者具有可执行 sudo 的权限后，便让使用者“输入使用者自己的密码”来确认； 
                若密码输入成功，便开始进行 sudo 后续接的指令（但 root 执行 sudo 时，不需要输入密码）； 
                若欲切换的身份与执行者身份相同，那也不需要输入密码;
            
            sudo的执行重点:能否使用 sudo 必须要看/etc/sudoers的设置值,使用 sudo 者是通过输入使用者自己的密码来执行后续的指令串;
            身份切换可使用 su ，也可使用 sudo ，但使用 sudo 时，必须先以 visudo 设置可使用的指令；


    使用者的特殊shell 与 PAM 模块:
        PAM模块简介:是一套应用程序接口(Application Programming Interface, API),提供了一连串的验证机制，只要使用者将验证阶段的需求告知 PAM 后，
            PAM就能够回报使用者验证的结果(成功或失败);
        
        PAM模块设置语法：
            PAM的流程:
                使用者开始执行 /usr/bin/passwd 这支程序，并输入密码; 
                passwd 调用 PAM 模块进行验证; 
                PAM 模块会到 /etc/pam.d/ 找寻与程序(passwd)同名的配置文件; 
                依据/etc/pam.d/passwd内的设置，引用相关的 PAM 模块逐步进行验证分析; 
                将验证结果(成功、失败以及其他讯息)回传给passwd这支程序;
                passwd 这支程序会根据 PAM 回传的结果决定下一个动作(重新输入新密码或者通过验证);
        
        常用模块:
           /etc/pam.d/*：每个程序个别的 PAM 配置文件; 
           /lib64/security/*：PAM 模块文件的实际放置目录; 
           /etc/security/*：其他 PAM 环境的配置文件; 
           /usr/share/doc/pam-*/：详细的 PAM 说明文档 ;

    Linux主机上的使用者讯息传递:
        查询使用者：w,who,last,lastlog;
        使用者对谈:write,mesg,wall;
        使用者邮件信箱：mail;
            常见指令:
                h : 列出信件标头,如果要查阅 40 封信件左右的信件标头，可以输入“ h 40 ” ;
                d : 删除后续接的信件号码，删除单封是“ d10 ”，删除 20~40 封则为“ d20-40 ”,但必须要配合 q 这个指令才行; 
                s : 将信件储存成文件,如将第 5 封信件的内容存成 ~/mail.file:“s 5 ~/mail.file” ;
                x : 输入 exit “不作任何动作离开 mail 程序”的意思, 不论你刚刚删除了什么信件使用 exit 都会直接离开 mail，所以刚刚进行的删除与阅读工作都会无效; 
                q : 相对于 exit 是不动作离开， q 则会实际进行你刚刚所执行的任何动作(尤其是删除);
        线上与使用者交谈可使用 write, wall，离线状态下可使用 mail 传送邮件！
        
        



