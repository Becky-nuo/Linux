系统服务：
    systemd 的服务类型：
        .service：一般服务类型(service unit)，主要是系统服务，包括服务器本身所需要的本机服务以及网络服务都是； 
        .socket：内部程序数据交换的插槽服务(socket unit),主要是 IPC （Inter-process communication） 的传输讯息插槽档(socket file)功能； 
        .target：执行环境类型(target unit),是一群 unit 的集合， .service 或 .socket 之类的服务； 
        .mount .automount：文件系统挂载相关的服务(automount unit / mount unit)，如网络的自动挂载、NFS 文件系统挂载等与文件系统相关性较高的程序管理；
        .path： 侦测特定文件或目录类型(path unit)，某些服务需要侦测某些特定的目录来提供伫列服务，需要 .path 的服务类型支持; 
        .timer：循环执行的服务(timer unit)，这个东西有点类似 anacrontab，不过是由 systemd 主动提供的，比 anacrontab 更加有弹性；

    systemctl 管理服务：服务的启动有两个阶段，一个是'开机的时候设置要不要启动这个服务'和'现在要不要启动这个服务'；
        语法：$ systemctl [command] [unit] 
        command 主要有： 
            start：立刻启动后面接的 unit；
            stop：立刻关闭后面接的 unit；
            restart：立刻关闭后启动后面接的 unit，执行 stop 再 start 的意思；
            reload：不关闭后面接的 unit 的情况下，重新载入配置文件，让设置生效；
            enable：设置下次开机时，后面接的 unit 会被启动；
            disable：设置下次开机时，后面接的 unit 不会被启动；
            status：目前后面接的这个 unit 的状态，会列出有没有正在执行、开机默认执行否、登录等信息等； 
            is-active：目前有没有正在运行中；
            is-enable：开机时有没有默认要启用这个 unit；
        
        语法：$ systemctl [command] [--type=TYPE] [--all] 
        command: 
            list-units：依据 unit 列出目前有启动的 unit,加上 --all 才会列出没启动的;
            list-unit-files：依据 /usr/lib/systemd/system/ 内的文件，将所有文件列表说明；
            --type=TYPE：就是之前提到的 unit type，主要有 service, socket, target 等；
    

        语法：$ systemctl [command] [unit.target] 
        选项与参数： 
            command： 
                get-default：取得目前的 target；
                set-default：设置后面接的 target 成为默认的操作模式；
                isolate：切换到后面接的模式；

        语法：$ systemctl list-dependencies [unit] [--reverse] 
        选项与参数： 
            ——reverse ：反向追踪谁使用这个 unit 的意思；

    
    systemctl 配置文件：
        [Unit]： unit 本身的说明，以及与其他相依 daemon 的设置，包括在什么服务之后才启动此 unit 之类的设置值； 
            
            Description： 就是当我们使用 systemctl list-units 时，会输出给管理员看的简易说明，使用 systemctl status 输出的此服务的说明，也是这个项目； 
            Documentation： 这个项目在提供管理员能够进行进一步的文件查询的功能； 
            After： 说明此 unit 是在哪个 daemon 启动之后才启动的意思！基本上仅是说明服务启动的顺序而已，并没有强制 要求里头的服务一定要启动后此 unit 才能启动； 
            Before： 与 After 的意义相反，是在什么服务启动前最好启动这个服务的意思。不过这仅是规范服务启动的顺序，并非强制要求的意思； 
            Requires： 明确的定义此 unit 需要在哪个 daemon 启动后才能够启动，就是设置相依服务，如果在此项设置的前导 服务没有启动，那么此 unit 就不会被启动；
            Wants： 与 Requires 刚好相反，规范的是这个 unit 之后最好还要启动什么服务比较好的意思，主要的目的是希望创建让使用者比较好操作的环境； 
       
        
        [Service], [Socket], [Timer], [Mount], [Path]..：不同的 unit type 就得要使用相对应的设置项目,项目内主要在规范服务启动的脚本、环境配置文件文件名、重新启动的方式等；

            TYPE： 说明 daemon 启动的方式，会影响到 ExecStart ；
            EnvironmentFile：可以指定启动脚本的环境配置文件；
            ExecStart： 实际执行此 daemon 的指令或脚本程序；
            ExecStop： 与 systemctl stop 的执行有关，关闭此服务时所进行的指令； 
            ExecReload： 与 systemctl reload 有关的指令行为；
            Restart： 当设置 Restart=1 时，则当此 daemon 服务终止后，会再次的启动此服务；
            RemainAfterExit： 当设置为 RemainAfterExit=1 时，则当这个 daemon 所属的所有程序都终止之后，此服务会再尝试启动；
            TimeoutSec： “强制结束”的状态；
            RestartSec： 与 Restart 有点相关性，如果这个服务被关闭，然后需要重新启动时，大概要 sleep 多少时间再重新启动 的意思，默认是 100ms(毫秒)；

        
        [Install]：这个项目就是将此 unit 安装到哪个 target 里面去的意思；

            WantedBy： 设置后面接的大部分是 *.target unit，意思是，这个 unit 本身是附挂在哪一个 target unit 下面,大多的服务性质的 unit 都是附挂在 multi-user.target 下面；
            Also： 当目前这个 unit 本身被 enable 时，Also 后面接的 unit 也请 enable 的意思，也就是具有相依性的服务可以写在这里；
            Alias： 进行一个链接的别名的意思；

    
    systemctl 针对 timer 的配置文件：
        systemctl.timer 的优势：
            由于所有的 systemd 的服务产生的信息都会被纪录(log),因此比 crond 在 debug 上面要更清楚方便的多； 
            各项 timer 的工作可以跟 systemd 的服务相结合； 
            各项 timer 的工作可以跟 control group(cgroup，用来取代 /etc/secure/limit.conf 的功能)结合，来限制该工作的资源利用；

        任务需求：
            系统的 timer.target 一定要启动；
            要有个 sname.service 的服务存在(sname 是你自己指定的名称)； 
            要有个 sname.timer 的时间启动服务存在；

        sname.timer 的设置值：
            OnActiveSec： 当 timers.target 启动多久之后才执行这只 unit OnBootSec 当开机完成后多久之后才执行；
            OnStartupSec： 当 systemd 第一次启动之后过多久才执行； 
            OnUnitActiveSec： 这个 timer 配置文件所管理的那个 unit 服务在最后一次启动后，隔多久后再执行一次的意思； 
            OnUnitInactiveSec： 这个 timer 配置文件所管理的那个 unit 服务在最后一次停止后，隔多久再执行一次的意思； 
            OnCalendar： 使用实际时间(非循环时间)的方式来启动服务的意思；
            Unit： 一般来说不太需要设置，基本上我们设置都是 sname.server + sname.timer；
            Persistent： 当使用 OnCalendar 的设置时，指定该功能要不要持续进行的意思；



    systemd-journald.service 简介：
        systemd-journald 用来管理与查询这次开机后的登录信息，而 rsyslogd 可以用来记录以前及现在的所以数据到磁盘文件中，方便未来进行查询；
        systemd-journald 由于是使用于内存的登录文件记录方式，因此重新开机过后，开机前的登录文件信息当然就不会被记载了；

        登录文件可以记录一个事件的何时、何地、何人、何事等四大信息，故系统有问题时务必查询登录文件； 
        系统的登录文件默认都集中放置到 /var/log/ 目录内，其中又以 messages 记录的信息最多；
        登录文件记录的主要服务与程序为：systemd-journald.service, rsyslog.service, rsyslogd；

        语法：$ journalctl [-nrpf] [--since TIME] [--until TIME] _optional 
        选项与参数：默认会列出全部的 log 内容，从旧的输出到最新的讯息；
            -n：列出最近的几行的意思，找最新的信息相当有用； 
            -r：反向输出，从最新的输出到最旧的数据；
            -p：秀出后面所接的讯息重要性排序； 
            -f：类似 tail -f 的功能，持续显示 journal 日志的内容(可用于实时监测)； 
            
            ——since --until：设置开始与结束的时间，让在该期间的数据输出而已； 
            _SYSTEMD_UNIT=unit.service：只输出 unit.service 的信息而已；
            _COMM=bash：只输出与 bash 有关的信息；
            _PID=pid：只输出 PID 号码的信息； 
            _UID=uid：只输出 UID 为 uid 的信息； 
            SYSLOG_FACILITY=[0-23]：使用 syslog.h 规范的服务相对序号来调用出正确的数据；

        logger 指令的应用：
            让数据储存到登录文件当中：
                语法：$ logger [-p 服务名称.等级] "讯息"

            rsyslogd 的配置文件在 /etc/rsyslog.conf，内容语法为：“ 服务名称.等级 记载设备或文件”；
            通过 linux 的 syslog 函数查询，了解上述服务名称有 kernel, user, mail...从 0 到 23 的服务序号；
            
            等级从不严重到严重依序有 info, notice, warning, error, critical, alert, emergency 等； 
            rsyslogd 本身有提供登录文件服务器的功能，通过修改 /etc/rsyslog.conf 内容即可达成； 
            
            logrotate 程序利用 crontab 来进行登录文件的轮替功能； 
            logrotate 的配置文件为 /etc/logrotate.conf ，而额外的设置则可写入 /etc/logrotate.d/* 内； 

        
        保存 journal 的方式：
            systemd-journald.servicd 的讯息不会存放到下一次开机后的，所以，重新开机后，那之前的记录通通会遗失；
            systemd-journald.service 的配置文件主要参考 /etc/systemd/journald.conf 的内容；

            
            创建一个 /var/log/journal 的目录，并且处理一下该目录的权限，那么 未来重新启动 systemd-journald.service 之后， 
            日志登录文件就会主动的复制一份到 /var/log/journal 目录下；
                例：
                    1. 先处理所需要的目录与相关权限设置： 
                        $ mkdir /var/log/journal 
                        $ chown root:systemd-journal /var/log/journal 
                        $ chmod 2775 /var/log/journal 
                
                    2. 重新启动 systemd-journald 并且观察备份的日志数据： 
                        $ systemctl restart systemd-journald.service 
                        $ ll /var/log/journal/

            注意：整个日志登录文件的容量会持续长大，因此你最好还是观察一下你系统能用的总容量；

        
        分析登录文件：logwatch 为 CentOS 7 默认提供的一个登录文件分析软件；
            新的 CentOS 7 由于内置 systemd-journald.service 的功能，可以使用 journalctl 直接从内存读出登录文件，查询性能较佳；
            systemd-journald 用来管理与查询这次开机后的登录信息，而 rsyslogd 可以用来记录以前及现在的所以数据到磁盘文件中，方便未来进行查询；
            systemd-journald 由于是使用于内存的登录文件记录方式，因此重新开机过后，开机前的登录文件信息当然就不会被记载了；

            登录文件可以记录一个事件的何时、何地、何人、何事等四大信息，故系统有问题时务必查询登录文件； 
            系统的登录文件默认都集中放置到 /var/log/ 目录内，其中又以 messages 记录的信息最多；
            登录文件记录的主要服务与程序为：systemd-journald.service, rsyslog.service, rsyslogd；

            语法：$ journalctl [-nrpf] [--since TIME] [--until TIME] _optional 
            选项与参数：默认会列出全部的 log 内容，从旧的输出到最新的讯息；
                -n：列出最近的几行的意思，找最新的信息相当有用； 
                -r：反向输出，从最新的输出到最旧的数据；
                -p：秀出后面所接的讯息重要性排序； 
                -f：类似 tail -f 的功能，持续显示 journal 日志的内容(可用于实时监测)； 
                
                ——since --until：设置开始与结束的时间，让在该期间的数据输出而已； 
                _SYSTEMD_UNIT=unit.service：只输出 unit.service 的信息而已；
                _COMM=bash：只输出与 bash 有关的信息；
                _PID=pid：只输出 PID 号码的信息； 
                _UID=uid：只输出 UID 为 uid 的信息； 
                SYSLOG_FACILITY=[0-23]：使用 syslog.h 规范的服务相对序号来调用出正确的数据；

            logger 指令的应用：
                让数据储存到登录文件当中：
                    语法：$ logger [-p 服务名称.等级] "讯息"

                rsyslogd 的配置文件在 /etc/rsyslog.conf，内容语法为：“ 服务名称.等级 记载设备或文件”；
                通过 linux 的 syslog 函数查询，了解上述服务名称有 kernel, user, mail...从 0 到 23 的服务序号；
                
                等级从不严重到严重依序有 info, notice, warning, error, critical, alert, emergency 等； 
                rsyslogd 本身有提供登录文件服务器的功能，通过修改 /etc/rsyslog.conf 内容即可达成； 
                
                logrotate 程序利用 crontab 来进行登录文件的轮替功能； 
                logrotate 的配置文件为 /etc/logrotate.conf ，而额外的设置则可写入 /etc/logrotate.d/* 内； 

            
            保存 journal 的方式：
                systemd-journald.servicd 的讯息不会存放到下一次开机后的，所以，重新开机后，那之前的记录通通会遗失；
                systemd-journald.service 的配置文件主要参考 /etc/systemd/journald.conf 的内容；

                
                创建一个 /var/log/journal 的目录，并且处理一下该目录的权限，那么 未来重新启动 systemd-journald.service 之后， 
                日志登录文件就会主动的复制一份到 /var/log/journal 目录下；
                    例：
                        1. 先处理所需要的目录与相关权限设置： 
                            $ mkdir /var/log/journal 
                            $ chown root:systemd-journal /var/log/journal 
                            $ chmod 2775 /var/log/journal 
                    
                        2. 重新启动 systemd-journald 并且观察备份的日志数据： 
                            $ systemctl restart systemd-journald.service 
                            $ ll /var/log/journal/

                注意：整个日志登录文件的容量会持续长大，因此你最好还是观察一下你系统能用的总容量；

            
            分析登录文件：logwatch 为 CentOS 7 默认提供的一个登录文件分析软件；
                新的 CentOS 7 由于内置 systemd-journald.service 的功能，可以使用 journalctl 直接从内存读出登录文件，查询性能较佳；



    
